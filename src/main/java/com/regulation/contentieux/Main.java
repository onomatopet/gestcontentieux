package com.regulation.contentieux;

import atlantafx.base.theme.PrimerLight;
import com.regulation.contentieux.config.DatabaseConfig;
import com.regulation.contentieux.dao.UtilisateurDAO;
import com.regulation.contentieux.dao.AffaireDAO;
import com.regulation.contentieux.dao.ContrevenantDAO;
import com.regulation.contentieux.dao.AgentDAO;
import com.regulation.contentieux.util.FXMLLoaderUtil;
import com.regulation.contentieux.util.StageManager;
import com.regulation.contentieux.util.AlertUtil;
import javafx.application.Application;
import javafx.application.Platform;
import javafx.scene.Scene;
import javafx.stage.Stage;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;

import javafx.scene.Parent;
import javafx.scene.image.Image;
import java.util.Objects;

/**
 * Classe principale de l'application de gestion des affaires contentieuses
 * VERSION CORRIG√âE - Utilisation des bonnes m√©thodes existantes
 */
public class Main extends Application {

    private static final Logger logger = LoggerFactory.getLogger(Main.class);

    // Configuration de l'application
    private static final String APP_TITLE = "Gestion des Affaires Contentieuses";
    private static final String APP_VERSION = "1.0.0";
    private static final String APP_ICON = "/images/app-icon.png";

    // Dimensions de la fen√™tre de connexion
    private static final int LOGIN_WIDTH = 400;
    private static final int LOGIN_HEIGHT = 350;

    @Override
    public void init() throws Exception {
        super.init();

        logger.info("=== D√âMARRAGE DE L'APPLICATION ===");
        logger.info("Application: {} v{}", APP_TITLE, APP_VERSION);
        logger.info("Java Version: {}", System.getProperty("java.version"));
        logger.info("JavaFX Version: {}", System.getProperty("javafx.version"));
        logger.info("OS: {} {}", System.getProperty("os.name"), System.getProperty("os.version"));

        // Initialisation des composants critiques
        try {
            initializeDatabase();
            logger.info("Initialisation de la base de donn√©es: OK");
        } catch (Exception e) {
            logger.error("Erreur lors de l'initialisation de la base de donn√©es", e);
            throw new RuntimeException("Impossible d'initialiser la base de donn√©es", e);
        }
    }

    @Override
    public void start(Stage primaryStage) throws Exception {
        logger.info("üöÄ D√©marrage de l'application Gestion des Affaires Contentieuses");

        try {
            // 1. Configuration du th√®me
            setupTheme();

            // 2. Initialisation de la base de donn√©es (d√©j√† fait dans init())
            logger.debug("üîß V√©rification de la base de donn√©es...");

            // 3. CORRECTION BUG : Initialiser les tables manquantes si m√©thode existe
            try {
                DatabaseConfig.initializeMissingTables();
                logger.debug("‚úÖ Tables manquantes initialis√©es");
            } catch (Exception e) {
                logger.debug("‚ö†Ô∏è M√©thode initializeMissingTables non disponible: {}", e.getMessage());
            }

            // 4. V√©rification des donn√©es existantes
            verifyDatabaseTables();

            // 5. CORRECTION BUG : Configuration du gestionnaire de sc√®nes
            // Utiliser setPrimaryStage au lieu d'initialize
            StageManager.getInstance().setPrimaryStage(primaryStage);

            // 6. Configuration de la fen√™tre principale
            setupPrimaryStage(primaryStage);

            // 7. CORRECTION BUG : Chargement de l'√©cran de connexion
            logger.debug("üé≠ Chargement de l'interface de connexion...");
            loadLoginScreen(primaryStage);

            // 8. Affichage de la fen√™tre
            primaryStage.show();

            logger.info("‚úÖ Application d√©marr√©e avec succ√®s");

        } catch (Exception e) {
            logger.error("‚ùå Erreur critique lors du d√©marrage de l'application", e);
            showStartupError(e);
            Platform.exit();
        }
    }

    @Override
    public void stop() throws Exception {
        logger.info("=== ARR√äT DE L'APPLICATION ===");

        try {
            // Nettoyage des ressources
            cleanupResources();
            logger.info("Nettoyage des ressources: OK");

        } catch (Exception e) {
            logger.error("Erreur lors de l'arr√™t de l'application", e);
        } finally {
            super.stop();
            logger.info("Application ferm√©e");
        }
    }

    /**
     * CORRECTION BUG : V√©rification des tables de base de donn√©es
     */
    private void verifyDatabaseTables() {
        try {
            // V√©rifications existantes
            UtilisateurDAO userDAO = new UtilisateurDAO();
            AffaireDAO affaireDAO = new AffaireDAO();
            ContrevenantDAO contrevenantDAO = new ContrevenantDAO();
            AgentDAO agentDAO = new AgentDAO();

            long userCount = userDAO.count();
            long affaireCount = affaireDAO.count();
            long contrevenantCount = contrevenantDAO.count();
            long agentCount = agentDAO.count();

            logger.debug("Table utilisateurs v√©rifi√©e: {} enregistrements", userCount);
            logger.debug("Table affaires v√©rifi√©e: {} enregistrements", affaireCount);
            logger.debug("Table contrevenants v√©rifi√©e: {} enregistrements", contrevenantCount);
            logger.debug("Table agents v√©rifi√©e: {} enregistrements", agentCount);

            // NOUVELLE V√âRIFICATION : Tables de liaison
            verifyLinkTables();

        } catch (Exception e) {
            logger.warn("Erreur lors de la v√©rification des tables: {}", e.getMessage());
        }
    }

    /**
     * CORRECTION BUG : V√©rification des tables de liaison
     * M√âTHODE S√âPAR√âE - non imbriqu√©e
     */
    private void verifyLinkTables() {
        try (Connection conn = DatabaseConfig.getSQLiteConnection();
             Statement stmt = conn.createStatement()) {

            // V√©rifier affaire_contraventions
            try (ResultSet rs = stmt.executeQuery("SELECT COUNT(*) FROM affaire_contraventions")) {
                if (rs.next()) {
                    logger.debug("‚úÖ Table affaire_contraventions: {} enregistrements", rs.getInt(1));
                }
            } catch (SQLException e) {
                logger.warn("‚ö†Ô∏è Table affaire_contraventions non accessible: {}", e.getMessage());
            }

            // V√©rifier affaire_acteurs
            try (ResultSet rs = stmt.executeQuery("SELECT COUNT(*) FROM affaire_acteurs")) {
                if (rs.next()) {
                    logger.debug("‚úÖ Table affaire_acteurs: {} enregistrements", rs.getInt(1));
                }
            } catch (SQLException e) {
                logger.warn("‚ö†Ô∏è Table affaire_acteurs non accessible: {}", e.getMessage());
            }

            // V√©rifier roles_speciaux
            try (ResultSet rs = stmt.executeQuery("SELECT COUNT(*) FROM roles_speciaux")) {
                if (rs.next()) {
                    logger.debug("‚úÖ Table roles_speciaux: {} enregistrements", rs.getInt(1));
                }
            } catch (SQLException e) {
                logger.warn("‚ö†Ô∏è Table roles_speciaux non accessible: {}", e.getMessage());
            }

        } catch (SQLException e) {
            logger.error("Erreur lors de la v√©rification des tables de liaison", e);
        }
    }

    /**
     * Configuration du th√®me AtlantaFX
     */
    private void setupTheme() {
        try {
            // Application du th√®me Primer Light par d√©faut
            Application.setUserAgentStylesheet(new PrimerLight().getUserAgentStylesheet());
            logger.info("Th√®me AtlantaFX appliqu√©: Primer Light");
        } catch (Exception e) {
            logger.warn("Impossible d'appliquer le th√®me AtlantaFX, utilisation du th√®me par d√©faut", e);
        }
    }

    /**
     * Configuration de la fen√™tre principale
     */
    private void setupPrimaryStage(Stage primaryStage) {
        // Titre de l'application
        primaryStage.setTitle(APP_TITLE + " - v" + APP_VERSION);

        // Ic√¥ne de l'application
        try {
            Image icon = new Image(Objects.requireNonNull(
                    getClass().getResourceAsStream(APP_ICON)));
            primaryStage.getIcons().add(icon);
        } catch (Exception e) {
            logger.warn("Impossible de charger l'ic√¥ne de l'application: {}", APP_ICON);
        }

        // Configuration de fermeture
        primaryStage.setOnCloseRequest(event -> {
            logger.info("Demande de fermeture de l'application");
            handleApplicationExit();
        });

        // Dimensions minimales
        primaryStage.setMinWidth(800);
        primaryStage.setMinHeight(600);
    }

    /**
     * CORRECTION BUG : Chargement de l'√©cran de connexion
     * Utilisation des m√©thodes existantes dans FXMLLoaderUtil
     */
    private void loadLoginScreen(Stage primaryStage) throws Exception {
        // CORRECTION : Utiliser loadParent au lieu de loadFXML
        Parent loginView = FXMLLoaderUtil.loadParent("fxml/login.fxml");
        Scene loginScene = new Scene(loginView, LOGIN_WIDTH, LOGIN_HEIGHT);

        // Application des styles personnalis√©s si disponibles
        try {
            String customStylesheet = Objects.requireNonNull(
                    getClass().getResource("/css/application.css")).toExternalForm();
            loginScene.getStylesheets().add(customStylesheet);
        } catch (Exception e) {
            logger.debug("Stylesheet personnalis√© non trouv√©, utilisation du th√®me par d√©faut");
        }

        // Configuration de la sc√®ne
        primaryStage.setScene(loginScene);
        primaryStage.setResizable(false);
        primaryStage.setWidth(LOGIN_WIDTH);
        primaryStage.setHeight(LOGIN_HEIGHT);
        primaryStage.centerOnScreen();

        logger.info("√âcran de connexion charg√©");
    }

    /**
     * Initialisation de la base de donn√©es
     */
    private void initializeDatabase() throws Exception {
        logger.info("Initialisation de la base de donn√©es...");

        // Test de connexion simple
        try (Connection conn = DatabaseConfig.getSQLiteConnection()) {
            if (conn != null) {
                logger.debug("‚úÖ Connexion SQLite √©tablie");
            } else {
                throw new RuntimeException("Impossible d'√©tablir la connexion SQLite");
            }
        }

        // V√©rification finale
        verifyDatabaseIntegrity();
    }

    /**
     * V√©rifie l'int√©grit√© de la base de donn√©es
     */
    private void verifyDatabaseIntegrity() {
        try (Connection conn = DatabaseConfig.getSQLiteConnection()) {
            // V√©rifier quelques tables cl√©s
            String[] criticalTables = {"utilisateurs", "affaires", "contrevenants", "agents"};

            for (String table : criticalTables) {
                try (Statement stmt = conn.createStatement();
                     ResultSet rs = stmt.executeQuery("SELECT COUNT(*) FROM " + table)) {

                    if (rs.next()) {
                        int count = rs.getInt(1);
                        logger.debug("Table {} v√©rifi√©e: {} enregistrements", table, count);
                    }
                } catch (SQLException e) {
                    logger.debug("Table {} non accessible (peut √™tre normale): {}", table, e.getMessage());
                }
            }

            logger.info("Int√©grit√© de la base de donn√©es v√©rifi√©e avec succ√®s");

        } catch (Exception e) {
            logger.error("Erreur lors de la v√©rification de l'int√©grit√©", e);
            throw new RuntimeException("Base de donn√©es corrompue", e);
        }
    }

    /**
     * Nettoyage des ressources avant fermeture
     */
    private void cleanupResources() {
        try {
            // Fermeture des connexions √† la base de donn√©es si m√©thode disponible
            // Note: HikariCP se charge automatiquement du nettoyage
            logger.debug("Nettoyage des ressources termin√©");
        } catch (Exception e) {
            logger.error("Erreur lors du nettoyage des ressources", e);
        }
    }

    /**
     * Gestion de la fermeture de l'application
     */
    private void handleApplicationExit() {
        Platform.exit();
    }

    /**
     * Affichage d'une erreur de d√©marrage
     */
    private void showStartupError(Exception e) {
        try {
            AlertUtil.showErrorAlert("Erreur de d√©marrage",
                    "Impossible de d√©marrer l'application",
                    "D√©tails: " + e.getMessage());
        } catch (Exception alertException) {
            // En cas d'erreur lors de l'affichage de l'alerte
            logger.error("Impossible d'afficher l'alerte d'erreur", alertException);
            System.err.println("ERREUR CRITIQUE: " + e.getMessage());
        }
    }

    /**
     * Point d'entr√©e de l'application
     */
    public static void main(String[] args) {
        try {
            // Configuration des propri√©t√©s syst√®me si n√©cessaire
            setupSystemProperties();

            // Lancement de l'application JavaFX
            launch(args);

        } catch (Exception e) {
            System.err.println("ERREUR FATALE: Impossible de d√©marrer l'application");
            e.printStackTrace();
            System.exit(1);
        }
    }

    /**
     * Configuration des propri√©t√©s syst√®me
     */
    private static void setupSystemProperties() {
        // Configuration du logging
        if (System.getProperty("logback.configurationFile") == null) {
            System.setProperty("logback.configurationFile", "logback.xml");
        }

        // Configuration JavaFX
        System.setProperty("javafx.preloader", "false");

        // Configuration pour Windows (si n√©cessaire)
        if (System.getProperty("os.name").toLowerCase().contains("windows")) {
            System.setProperty("glass.accessible.force", "false");
        }

        // Configuration de l'acc√©l√©ration graphique
        System.setProperty("prism.lcdtext", "false");
        System.setProperty("prism.subpixeltext", "false");
    }

    /**
     * @return Le titre complet de l'application avec version
     */
    public static String getFullAppTitle() {
        return APP_TITLE + " - v" + APP_VERSION;
    }
}